points(data$X, model1$fitted, pch='*', col="blue")
pred1 = predict(tuneResult$best.model, newdata = data)
points(data$X, pred1, pch='*', col="red")
data1 = seq(1, 500, 2)
View(data)
data1
(500/6)
d1 = data.frame()
d1 = array(dim=c((500/6), 6))
View(d1)
d1 = data.frame()
for (i in 1:(500/6)){
d1[i, i:(i+5)]=data1[i, (i+5)]
}
d1 = array(dim=c((500/6), 6))
for (i in 1:(500/6)){
d1[i, i:(i+5)]=data1[i, (i+5)]
}
d1[i,]=data1[i, (i+5)]
for (i in 1:(500/6)){
d1[i,]=data1[i, (i+5)]
}
data1[i:(i+5)]
d1 = array(dim=c((500/6), 6))
for (i in 1:(500/6)){
d1[i,]=data1[i, (i+5)]
}
for (i in 1:(500/6)){
d1[i,]=data1[i:(i+5)]
}
X = d1[, 1:5]
Y = d1[, 6]
model3 <- svm(X=X, Y=Y)
model3 <- svm(x=X, y=Y)
View(d1)
pred2 = predict(model3, newdata = X[61:83, ])
cbind(Y[61:83], pred2)
Y[61:83]
Data("Ozone")
data("Ozone")
library(mlbench)
data("Ozone")
View(Ozo)
View(Ozone)
O2 <- na.omit(Ozone)
View(O2)
View(O2)
O2$V1 <- as.numeric(O2$V1)
O2$V2 <- as.numeric(O2$V2)
O2$V3 <- as.numeric(O2$V3)
nn = nrow(O2)
train = O2[1:(nn*0.7), ]
test = O2[-(1:(nn*0.7)), ]
View(train)
model1 = svm(V4~., train, cost=1000, gamma=1e-04)
model1
predict(model1, newdata = test)
View(Ozone)
model1 = svm(V4~., train, cost=1000, gamma=1e-04)
rmse <- function(error) {
sqrt(mean(error^2))
}
rmse(train$V4-model1$fitted)
pred1 <- predict(model1, newdata = test)
cbind(test$V4, pred1)
rmse(test$V4, pred1)
pred1 <- predict(model1, newdata = test)
cbind(test$V4, pred1)
rmse(test$V4, pred1)
model1 = svm(V4~., train, cost=1000, gamma=1e-04)
rmse <- function(error) {
sqrt(mean(error^2))
}
rmse(train$V4-model1$fitted)
pred1 <- predict(model1, newdata = test)
cbind(test$V4, pred1)
rmse(test$V4, pred1)
rmse(test$V4-pred1)
data <- read.csv("날씨.csv", header = T)
data01 <- read.csv("날씨.csv", header = T)
data01 <- read.csv("날씨.csv", header = T)
data01
str(data01)
data02 <- na.omit(data1)
data02 <- na.omit(data01)
View(data02)
View(data02)
data01 <- data01[ , -1]
data01 <- read.csv("날씨.csv", header = T)
data01 <- data01[ , -1]
data02 <- na.omit(data01)
View(data02)
data02 <- na.omit(data01)
data03 <- matrix(as.matrix(data02), nrow=1, byrow = F)
View(data03)
nn1 = length(data03)
dd1 = array(dim=c((nn1/6), 6))
for(i in 1:(nn1/6)){
dd1[i,] = data03[i:(i+5)]
}
colnames(dd1) <- c("V1", "V2", "V3", "V4", "V5", "Y",)
View(dd1)
colnames(dd1) <- c("V1", "V2", "V3", "V4", "V5", "Y")
View(dd1)
plot(data03)
plot(1:length(data03), data03)
length(data03)
plot(data01
plot(data01)
plot(data01)
plot(data03)
plot(1:length(data03), data03)
data1 = seq(1, 500, 2)
dd1 = array(dim=c((nn1-6), 6))
for(i in 1:(nn1-6)){
dd1[i,] = data03[i:(i+5)]
}
colnames(dd1) <- c("V1", "V2", "V3", "V4", "V5", "Y")
plot(1:length(data03), data03)
View(dd1)
View(data03)
View(data01)
model2 = svm(x=dd1[, 1:5], y=dd1[, 6])
test = sample(1:nrow(dd1), 10, replace = F)
test
test_ind = sample(1:nrow(dd1), 10, replace = F)
pred2 = predict(model2, newdata = dd1[test_ind, 1:5])
cbind(dd1[test_ind, 6], pred2)
library(nnet)
nnet(x=dd1[, 1:5], y=dd1[, 6], size = 2, lineout=T)
model1 = nnet(x=dd1[, 1:5], y=dd1[, 6], size = 2, lineout=T)
model1$wts
model1$fitted.values
install.packages("neuralnet")
library(neuralnet)
install.packages('shiny')
library(shiny)
install.packages("drat", repos="https://cran.rstudio.com")
install.packages("mxnet")
drat:::addRepo("dmlc")
install.packages("mxnet")
library(mxnet)
library(mxnet)
install.packages("mxnet")
cran <- getOption("repos")
cran["dmlc"] <- "https://s3.amazonaws.com/mxnet-r/"
options(repos = cran)
install.packages("mxnet")
library(mxnet)
train<-read.csv('https://github.com/ozt-ca/tjo.hatenablog.samples/raw/master/r_samples/public_lib/jp/mnist_reproduced/short_prac_train.csv')
test<-read.csv('https://github.com/ozt-ca/tjo.hatenablog.samples/raw/master/r_samples/public_lib/jp/mnist_reproduced/short_prac_test.csv')
train <- data.matrix(train)
test <- data.matrix(test)
View(test)
train.x <- train[,-1]
train.y <- train[,1]
View(train.x)
View(train)
train.x <- t(train.x/255)
View(train.x)
test_org <- test
test <- test[,-1]
test <- t(test/255)
table(train.y)
library(mlbenchx)
library(mlbench)
data(Vowel)
data11=Vowel
data11$Class = as.numeric(data11$Class)
data11=Vowel
data11$Class = as.numeric(data11$Class)
model_vowel = svm(Class~., Vowel)
model_vowel
model_vowel$fitted
View(data11)
str(Vowel)
data11$Class = as.numeric(data11$Class)
str(Vowel)
str(data11)
model_vowel = svm(Class~., data11)
model_vowel$fitted
View(data11)
model_vowel = svm(Class~., data11[, -1])
model_vowel$fitted
model_vowel = svm(Class~., data11[, -1], type='C-classification', kernel='sigmoid')
model_vowel$fitted
model_vowel1 = svm(Class~., data11[, -1])
model_vowel2 = svm(Class~., data11[, -1], type='C-classification', kernel='sigmoid')
model_vowel1$fitted
model_vowel2$fitted
sum(diag(t1))/sum(t1)
t1 = table(data11$Class, model_vowel$fitted)
t2 = table(data11$Class, model_vowe2$fitted)
model_vowel2 = svm(Class~., data11[, -1], type='C-classification', kernel='sigmoid')
t2 = table(data11$Class, model_vowe2$fitted)
t1 = table(data11$Class, model_vowel1$fitted)
t2 = table(data11$Class, model_vowel2$fitted)
sum(diag(t1))/sum(t1)
sum(diag(t2))/sum(t2)
data11=Vowel
data11$Class = as.numeric(data11$Class)
model_vowel1 = svm(Class~., data11[, -1])
model_vowel2 = svm(Class~., data11[, -1], type='C-classification', kernel='sigmoid')
model_vowel1$fitted
model_vowel2$fitted
t1 = table(data11$Class, model_vowel1$fitted)
t2 = table(data11$Class, model_vowel2$fitted)
sum(diag(t1))/sum(t1)
sum(diag(t2))/sum(t2)
t1
t2
sum(diag(t2))
sum(t2)
library(ggplot2)
mpg
library(shiny)
runExample("01_hello")
runExample("01_hello")
runExample("01_hello")
runGist(6571951)
runGitHub("GoogleAnalytics", "ChrisBeeley")
runGist(6571951)
runGitHub("GoogleAnalytics", "ChrisBeeley")
setwd("/Users/yoon/Documents/DataScience/R_work/MinimalHTMLCode")
runApp()
runApp()
setwd("/Users/yoon/Documents/DataScience/R_work")
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
library(rJava)
Sys.setlocale("LC_ALL", "ko_KR.UTF-8") # 한글 인코딩 가능하게 해줌
tracking = read.csv("go_track_trackspoints.csv", header = T, fileEncoding="UTF-8")
app = read.csv("go_track_tracks.csv", header = T, fileEncoding="UTF-8")
colnames(app) = c("track_id", "id_android", "speed", "time", "distance", "rating", "rating_bus", "rating_weather", "car_or_bus", "linha")
table(tracking$track_id)
table(app$id_android) # id_android는 유저id 라고 볼수있음.
View(app)
car_idx_list = which(app$car == 1)
bus_idx_list = which(app$car == 2)
View(tracking)
car_idx_list = which(app$car_or_bus == 1)
bus_idx_list = which(app$car_or_bus == 2)
View(app)
car1 = app[car_idx_list, ]
bus1 = app[bus_idx_list, ]
table(car1$rating)
table(bus1$rating)
app$car_or_bus = as.factor(app$car_or_bus)
vehicle = aov(rating~car_or_bus, data=app)
summary(vehicle)
t = TukeyHSD(vehicle, "car_or_bus")
t
View(app)
str(app)
a7 = data.frame(1:3, rep(1:3), LETTERS[5:7])
str(a7)
View(a7)
View(a7)
View(a7)
rep(1:3)
rep(1:3, 4)
str(a7)
a10 = as.matrix(a7)
View(a10)
str(a10)
library(readxl)
g3 <- read_xlsx("23.xlsx", sheet = 1, col_names = T)
g3 <- g3[-1,]
g4 = g3[1:29, ] # 서청주 빼고 출력
colnames(g4) = c("지점","1시","2시","3시","4시","5시","6시","7시","8시","9시","10시","11시","12시","13시","14시","15시","16시","17시","18시","19시","20시","21시","22시","23시","24시")
g4 = g4[, 1:17]
g4 = na.omit(g4)
str(g4)
g4$`1시` <- as.numeric(g4$`1시`)
g4$`2시` <- as.numeric(g4$`2시`)
g4$`3시` <- as.numeric(g4$`3시`)
g4$`4시` <- as.numeric(g4$`4시`)
g4$`5시` <- as.numeric(g4$`5시`)
g4$`6시` <- as.numeric(g4$`6시`)
g4$`7시` <- as.numeric(g4$`7시`)
g4$`8시` <- as.numeric(g4$`8시`)
g4$`9시` <- as.numeric(g4$`9시`)
g4$`10시` <- as.numeric(g4$`10시`)
g4$`11시` <- as.numeric(g4$`11시`)
g4$`12시` <- as.numeric(g4$`12시`)
g4$`13시` <- as.numeric(g4$`13시`)
g4$`14시` <- as.numeric(g4$`14시`)
g4$`15시` <- as.numeric(g4$`15시`)
g4$`16시` <- as.numeric(g4$`16시`)
View(g4)
View(g4)
g4$q1 = apply(g4[, 2:7], 1, FUN=mean)
g4$q2 = apply(g4[, 8:13], 1, FUN=mean)
g4$q3 = apply(g4[, 14:17], 1, FUN=mean)
View(g4)
var.test(g4$q2, g4$q3)
t.test(x=g4$q2, y=g4$q3, var.equal = T, paired = T)
plot(cars)
plot(cars)
cor.test(cars$speed, cars$dist) # 귀무가설 : 상관관계가 0이다
model1 = lm(dist ~ speed, cars)
summary(model1)
par(mfrow = c(2, 2))
plot(model1)
n = nrow(iris)
set.seed(200)
ind = sample(1:n, n*0.7, replace = F)
train = iris[ind,]
test = iris[-ind,]
model2 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, train)
vif(model2) # 10이 넘는 값 두개가 있으므로 다중 공선성 문제 존재.
library(car)
vif(model2) # 10이 넘는 값 두개가 있으므로 다중 공선성 문제 존재.
model4 = lm(Sepal.Length ~ Sepal.Width + Petal.Length, train)
vif(model4) # 10이 넘는 값 두개가 있으므로 다중 공선성 문제 존재.
library(mlbench)
data("BostonHousing")
View(BostonHousing)
m <- lm(medv ~., data = BostonHousing)
summary(m)
m2 <- step(m, direction = "both")
m2
summary(m2)
m2 <- step(m, direction = "both")
o1 = outlierTest(m)
o1
o1$rstudent
names(o1$rstudent)
o2 = as.numeric(names(o1$rstudent))
B2 = BostonHousing[-o2,]
d1 = lm(Sepal.Length~., train)
n = nrow(iris)
set.seed(200)
ind = sample(1:n, n*0.7, replace = F)
train = iris[ind,]
test = iris[-ind,]
d1 = lm(Sepal.Length~., train)
summary(d1)
d1 = stats::lm(Sepal.Length~., train)
summary(d1)
nlevels(train$Species)
levels(train$Species)
cbind(test$Species, as.numeric(test$Species))
product <- read.csv("product_2015_data/product.csv", header=T, sep=",", fileEncoding="UTF-8")
code <- read.csv("product_2015_data/code.csv", header=T, sep=",", fileEncoding="UTF-8")
colnames(product) <- c('date','category','item','region','mart','price')
library(doBy)
temp = summaryBy(price~item+date, product, FUN = mean) # 1번 방법
View(product)
View(temp)
category <- subset(code, code$구분코드설명=="품목코드")
colnames(category) <- c('code', 'exp', 'item', 'name')
date.item.mean <- merge(temp, category, by="item") # temp에다가 카테고리 정보를 merge함.
library(lubridate)
date.item.mean$month <- str_sub(as.character.Date(temp$date),1,7)
month.item.mean <- summaryBy(price.mean~month+name+item, date.item.mean, FUN = mean)
month.item.mean2 <- aggregate(data = date.item.mean, price.mean~month+name+item, mean)
colnames(month.item.mean) <- c("month", "name", "item", "price.mean")
date.item.mean$name
date.item.mean <- droplevels(date.item.mean) # date.item.mean의 name의 level중 쓰레기값 제거(안쓰는데 들어온 애들이 있음)
date.item.mean$name
temp <- split(date.item.mean, date.item.mean$name)
str(temp)
daily.product <- data.frame(쌀=temp$쌀$price.mean,   배추=temp$배추$price.mean,
상추=temp$상추$price.mean, 호박=temp$호박$price.mean,
양파=temp$양파$price.mean, 파프리카=temp$파프리카$price.mean,
참깨=temp$참깨$price.mean, 사과=temp$사과$price.mean,
돼지고기=temp$돼지고기$price.mean,   닭고기=temp$닭고기$price.mean)
month.item.mean$name
month.item.mean <- droplevels(month.item.mean)
temp <- split(month.item.mean, month.item.mean$name)
monthly.product <- data.frame(쌀=temp$쌀$price.mean,   배추=temp$배추$price.mean,
상추=temp$상추$price.mean, 호박=temp$호박$price.mean,
양파=temp$양파$price.mean, 파프리카=temp$파프리카$price.mean,
참깨=temp$참깨$price.mean, 사과=temp$사과$price.mean,
돼지고기=temp$돼지고기$price.mean,   닭고기=temp$닭고기$price.mean)
for (i in 1:9){
for (j in 1:9){
if ((i+j) < 11){
jc <- ca.jo(data.frame(daily.product[,i], daily.product[,i+j]), type="trace", K=2, ecdet="const")
if (jc@teststat[1] > jc@cval[1]){
if (jc@V[1,1]*jc@V[2,1]>0){
cat(colnames(monthly.product)[i],"와" , colnames(monthly.product)[i+j], ": 음의 공적분 관계가 있다.", "\n")
} else {
cat(colnames(monthly.product)[i],"와" , colnames(monthly.product)[i+j], ": 양의 공적분 관계가 있다.","\n")
}
}
}
}
}
library(plyr); library(ggplot2); library(stringr); library(zoo); library(corrplot); library(gridExtra); library(urca)
for (i in 1:9){
for (j in 1:9){
if ((i+j) < 11){
jc <- ca.jo(data.frame(daily.product[,i], daily.product[,i+j]), type="trace", K=2, ecdet="const")
if (jc@teststat[1] > jc@cval[1]){
if (jc@V[1,1]*jc@V[2,1]>0){
cat(colnames(monthly.product)[i],"와" , colnames(monthly.product)[i+j], ": 음의 공적분 관계가 있다.", "\n")
} else {
cat(colnames(monthly.product)[i],"와" , colnames(monthly.product)[i+j], ": 양의 공적분 관계가 있다.","\n")
}
}
}
}
}
View(daily.product)
library(class)
pred1 = knn(train[,-1], test[,-1], train[,1], k=2)
wbcd = read.csv("wisc_bc_data.csv", header = T, stringsAsFactors = F, sep = ",")
wbcd <- wbcd[ , -1]
wbcd$diagnosis <- factor(wbcd$diagnosis)
levels(wbcd$diagnosis)
wbcd_n <- wbcd
wbcd_n[, -1] <- scale(wbcd[, -1]) # 데이터 표준화 작업
nn <- nrow(wbcd_n)
train = wbcd_n[1:(nn*0.7), ]
test = wbcd_n[((nn*0.7)+1):(nn+1), ]
library(class)
pred1 = knn(train[,-1], test[,-1], train[,1], k=2)
pred1
View(train)
library(party)
set.seed(1000)
ind = sample(1:nrow(iris),
nrow(iris)*0.7,
replace = F)
train = iris[ind, ]
test = iris[-ind, ]
c1 = ctree(Species~., train)
plot(c1)
c1 = ctree(Species~., train)
library(party)
install.packages("party")
library(party)
set.seed(1000)
ind = sample(1:nrow(iris),
nrow(iris)*0.7,
replace = F)
train = iris[ind, ]
test = iris[-ind, ]
c1 = ctree(Species~., train)
plot(c1)
ctl <- ctree_control(maxdepth=2)
c1 = ctree(Species~., train, controls = ctl)
plot(c1)
pred = predict(c1, newdata=test)
sum(pred==test$Species)/nrow(test)
data("Vowel")
c1 = ctree(Species~., train)
pred = predict(c1, newdata=test)
sum(pred==test$Species)/nrow(test)
c1 = ctree(Species~., train)
pred = predict(c1, newdata=test)
sum(pred==test$Species)/nrow(test)
c1 = ctree(Species~., train, controls = ctl)
pred = predict(c1, newdata=test)
sum(pred==test$Species)/nrow(test)
install.packages("tree")
library(tree)
library(MASS)
ir.tr = tree(Class~., train) # 가지치기 전
### 적용
data("Vowel")
set.seed(100)
ind2 = sample(1:nrow(Vowel),
nrow(Vowel)*0.7,
replace = F)
train = Vowel[ind2, -1]
test = Vowel[-ind2, -1]
ir.tr = tree(Class~., train) # 가지치기 전
plot(ir.tr)
text(ir.tr, all = T)
plot(prune.misclass(ir.tr))
ir.tr1 = prune.misclass(ir.tr, best=14) # 가지치기 후
plot(ir.tr1)
text(ir.tr1, all = T)
data1 = iris[1:100, ]
data1$Species=factor(data1$Species)
m <- glm(Species~., data = data1, family = "binomial")
m
m$fitted.values
View(data1)
data1 = iris[1:150, ]
data1$Species=factor(data1$Species)
m <- glm(Species~., data = data1, family = "binomial")
m$fitted.values
library(mlbench)
data(Sonar)
Sonar[, 1:60] <- scale(Sonar[, 1:60])
ind = sample(1:nrow(Sonar),
nrow(Sonar)*0.7,
replace = F)
train = Sonar[ind, ]
test = Sonar[-ind, ]
View(train)
set.seed(1000)
ind = sample(1:nrow(iris),
nrow(iris)*0.7,
replace = F)
train = iris[ind, ]
test = iris[-ind, ]
library(nnet)
(m <- multinom(Species~., data=train))
m <- glm(Species~., data = train, family = "binomial")
library(randomForest)
library(mlbench)
data(Sonar)
Sonar[, 1:60] <- scale(Sonar[, 1:60])
ind = sample(1:nrow(Sonar),
nrow(Sonar)*0.7,
replace = F)
train = Sonar[ind, ]
test = Sonar[-ind, ]
