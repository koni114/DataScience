data1 = read.table(pipe("pbpaste"), header = F, sep = ",")
View(data1)
data1 = read.table(pipe("pbpaste"), header = F, stringsAsFactors = F, sep = ",")
View(data1)
str(data1)
View(data1)
data1 = read.csv("wisc_bc_data.csv", header = T, stringsAsFactors = F, sep = ",")
setwd("/Users/yoon/Documents/DataScience/R_work")
data1 = read.csv("wisc_bc_data.csv", header = T, stringsAsFactors = F, sep = ",")
str(data1)
View(data1)
wbcd = read.csv("wisc_bc_data.csv", header = T, stringsAsFactors = F, sep = ",")
View(wbcd)
wbcd <- wbcd[ , -1]
wbcd$diagnosis <- factor(wbcd$diagnosis)
levels(wbcd$diagnosis)
str(wbcd)
levels(wbcd$diagnosis)
str(wbcd)
wbcd <- wbcd[ , -1]
wbcd$diagnosis <- factor(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis)
wbcd = read.csv("wisc_bc_data.csv", header = T, stringsAsFactors = F, sep = ",")
wbcd <- wbcd[ , -1]
wbcd$diagnosis <- factor(wbcd$diagnosis)
str(wbcd)
wbcd = read.csv("wisc_bc_data.csv", header = T, stringsAsFactors = F, sep = ",")
str(wbcd)
wbcd <- wbcd[ , -1]
wbcd$diagnosis <- factor(wbcd$diagnosis)
wbcd_n <- scale(wbcd[, -1])
View(wbcd_n)
nn <- nrow(wbcd_n)
train = wbcd_n[1:(nn*0.7), ]
test = wbcd_n[(nn*0.7)+1:nn, ]
test = wbcd_n[(nn*0.7)+1:nn, ]
nn <- nrow(wbcd_n)
train = wbcd_n[1:(nn*0.7), ]
test = wbcd_n[(nn*0.7)+1:nn, ]
test = wbcd_n[((nn*0.7)+1):nn, ]
View(wbcd_n)
View(test)
test = wbcd_n[((nn*0.7)+1):(nn+1), ]
View(test)
View(wbcd_n)
install.packages("class")
library(class)
View(train)
wbcd = read.csv("wisc_bc_data.csv", header = T, stringsAsFactors = F, sep = ",")
wbcd <- wbcd[ , -1]
wbcd$diagnosis <- factor(wbcd$diagnosis)
wbcd_n <- scale(wbcd[, -1]) # 데이터 표준화 작업
wbcd_n <- scale(wbcd[, -1]) # 데이터 표준화 작업, 레이블 제거
nn <- nrow(wbcd_n)
train = wbcd_n[1:(nn*0.7), ]
test = wbcd_n[((nn*0.7)+1):(nn+1), ]
wbcd_n <- wbcd
wbcd_n[, -1] <- scale(wbcd[, -1]) # 데이터 표준화 작업
nn <- nrow(wbcd_n)
train = wbcd_n[1:(nn*0.7), ]
test = wbcd_n[((nn*0.7)+1):(nn+1), ]
pred1 = knn(train[,-1], test[,-1], train[,1], k=3)
t1 = table(test[,1], pred1)
t1
cor1 = sum(diag(1)/sum(1))
cor1
cor1 = sum(diag(t1)/sum(t1))
pred1
t1 = table(test[,1], pred1)
ㅅ1
t1
pred1 = knn(train[,-1], test[,-1], train[,1], k=2)
t1 = table(test[,1], pred1)
t1
out1 = data.frame()
for (i in 1:15){
pred1 = knn(train[,-1], test[,-1], train[,1], k=i)
t1 = table(test[,1], pred1)
cor1 = sum(diag(t1)/sum(t1))
out2 = cbind(i, cor1)
out1 = rbind(out1, out2)
}
out1
out3 = which(max(out1[,2]))
out3 = which.max(out1[,2])
out1[out3]
out1[out3,]
setwd("/Users/yoon/Documents/DataScience/R_work")
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
library(rJava)
a <- c(1,6)
b <- c(2,4)
c <- c(5,7)
d <- c(3,5)
e <- c(5,2)
f <- c(5,1)
c.data <- data.frame(a,b,c,d,e,f)
View(c.data)
c.data <- t(c_data)
c_data <- data.frame(a,b,c,d,e,f)
c_data <- t(c_data)
View(c_data)
dist(c_data, method = 'euclidean')
d <- dist(c_data, method = 'euclidean')
class(d)
hclust(d, method = 'single')
h1 <- hclust(d, method = 'single')
plot(h1)
k1 = kmeans(iris[, 1:4], 3)
k1
plot(k1)
k1$cluster
table(iris$Species, k1$cluster)
k1$withinss
k1$tot.withinss # -> 그룹 내의 오차값의 합
k1$tot.withinss
k0 = data.frame()
for (i in 1:6){
k2 = kmeans(iris[, 1:4], i)
k3 = cbind(i, k2$tot.withinss)
k0 = rbind(k0, k3)
}
k0
plot(k0)
k0[which.min(k0[,2])]
k0[which.min(k0[,2]),2]
k0[which.min(k0[,2]), 0]
k0[which.min(k0[,2]), 2]
k0[which.min(k0[,2]), ]
plot(k0, type = 'b')
k0[which.min(k0[,2]), ]
k2 = kmeans(iris[, 1:4], i, iter.max = 100)
k0 = data.frame()
for (i in 1:6){
k2 = kmeans(iris[, 1:4], i, iter.max = 100)
k3 = cbind(i, k2$tot.withinss)
k0 = rbind(k0, k3)
}
plot(k0, type = 'b')
k0[which.min(k0[,2]), ]
k1 = kmeans(iris[, 1:4], 3, iter.max = 100)
k1$cluster
k1$withinss # -> 그룹 내의 오차값의 합
k1$tot.withinss
table(iris$Species, k1$cluster)
setwd("/Users/yoon/Documents/DataScience/R_work")
Sys.setlocale("LC_ALL", "ko_KR.UTF-8") # 한글 인코딩 가능하게 해줌
library(plyr); library(ggplot2); library(stringr); library(zoo); library(corrplot); library(gridExtra); library(urca)
product <- read.csv("product_2015_data/product.csv", header=T, sep=",", fileEncoding="UTF-8")
code <- read.csv("product_2015_data/code.csv", header=T, sep=",", fileEncoding="UTF-8")
colnames(product) <- c('date','category','item','region','mart','price')
temp = summaryBy(price~item+date, product, FUN = mean) # 1번 방법
category <- subset(code, code$구분코드설명=="품목코드")
colnames(category) <- c('code', 'exp', 'item', 'name')
date.item.mean <- merge(temp, category, by="item") # temp에다가 카테고리 정보를 merge함.
library(lubridate)
date.item.mean$month <- str_sub(as.character.Date(temp$date),1,7)
month.item.mean <- summaryBy(price.mean~month+name+item, date.item.mean, FUN = mean)
temp = summaryBy(price~item+date, product, FUN = mean) # 1번 방법
library(doBy)
temp = summaryBy(price~item+date, product, FUN = mean) # 1번 방법
category <- subset(code, code$구분코드설명=="품목코드")
colnames(category) <- c('code', 'exp', 'item', 'name')
date.item.mean <- merge(temp, category, by="item") # temp에다가 카테고리 정보를 merge함.
date.item.mean$month <- str_sub(as.character.Date(temp$date),1,7)
month.item.mean <- summaryBy(price.mean~month+name+item, date.item.mean, FUN = mean)
month.item.mean2 <- aggregate(data = date.item.mean, price.mean~month+name+item, mean)
View(month.item.mean2)
View(month.item.mean)
month.item.mean3 <- ave(date.item.mean$price.mean, date.item.mean$month+date.item.mean$name+date.item.mean$item, FUN=function(x) mean(x, na.rm = T))
setwd("/Users/yoon/Documents/DataScience/R_work")
wbcd = read.csv("wisc_bc_data.csv", header = T, stringsAsFactors = F, sep = ",")
wbcd = read.csv("wisc_bc_data.csv", header = T, stringsAsFactors = F, sep = ",")
wbcd = read.csv("sns.csv", header = T, stringsAsFactors = F, sep = ",")
setwd("/Users/yoon/Documents/DataScience/R_work")
wbcd = read.csv("sns.csv", header = T, stringsAsFactors = F, sep = ",")
teens = read.csv("snsdata.csv", header = T, stringsAsFactors = F, sep = ",")
View(teens)
table(teens$gender, useNA = "ifany")
summary(teens$age)
teens$age <- ifelse(teens$age >= 13 & teens$age < 20, teens$age, NA)
summary(teens$age)
teens$age
View(teens)
teens$female <- ifelse(teens$gender == 'F', 1, 0)
teens$no_gender <- ifelse(is.na(teens$gender), 1, 0)
View(teens)
ave_age <- ave(teens$age, teens$gradyear, FUN = function(x) mean(x, na.rm = T))
ave_age
View(teens)
ave_age <- ave(teens$age, teens$gradyear, FUN = function(x) mean(x, na.rm = T))
teens$age <- ifelse(is.na(teens$age), ave_age, teens$age)
table(teens$age, useNA = "ifany")
length(which(teens$age == NA))
table(teens$age, useNA = "ifany")
View(teens)
teens = read.csv("snsdata.csv", header = T, stringsAsFactors = F, sep = ",")
teens$age <- ifelse(teens$age >= 13 & teens$age < 20, teens$age, NA)
View(teens)
ave_age <- ave(teens$age, teens$gradyear, FUN = function(x) mean(x, na.rm = T))
ave_age
teens_cluster <- kmeans(interests_z, 5)
interests <- teens[, 5:40]
interests_z <- scale(interests)
teens_cluster <- kmeans(interests_z, 5)
table(teens_cluster)
table(teens_cluster$cluster)
teens_cluster$centers
View(interests)
str(ave_age)
teens$age <- ifelse(is.na(teens$age), 18.7, teens$age)
teens$age <- ifelse(is.na(teens$age), ave_age, teens$age)
View(interests)
View(teens)
View(interests_z)
View(interests_z)
View(interests_z)
table(teens_cluster$cluster)
teens_cluster$centers
View(interests_z)
ave_age
teens_cluster$centers
ave_age <- ave(teens$age, teens$gradyear, FUN = function(x) mean(x, na.rm = T))
View(interests)
setwd("/Users/yoon/Documents/DataScience/R_work")
library(plyr); library(ggplot2); library(stringr); library(zoo); library(corrplot); library(RColorBrewer)
Sys.setlocale("LC_ALL", "ko_KR.UTF-8") # 한글 인코딩 가능하게 해줌
product <- read.csv("product_2015_data/product.csv", header=T, sep=",", fileEncoding="UTF-8")
code <- read.csv("product_2015_data/code.csv", header=T, sep=",", fileEncoding="UTF-8")
weather <- read.csv("product_2015_data/weather.csv", header=T, sep=",", fileEncoding="UTF-8")
colnames(product) <- c('date','category','item','region','mart','price')
category <- subset(code, code$구분코드설명=="품목코드")
colnames(category) <- c('code', 'exp', 'item', 'name')
total.pig <-product[which(product$item==514),]
region <- subset(code, code$구분코드설명=="지역코드")
View(total.pig)
product <- read.csv("product_2015_data/product.csv", header=T, sep=",", fileEncoding="UTF-8")
code <- read.csv("product_2015_data/code.csv", header=T, sep=",", fileEncoding="UTF-8")
weather <- read.csv("product_2015_data/weather.csv", header=T, sep=",", fileEncoding="UTF-8")
summary(product)
str(product)
summary(weather)
colnames(product) <- c('date','category','item','region','mart','price')
category <- subset(code, code$구분코드설명=="품목코드")
colnames(category) <- c('code', 'exp', 'item', 'name')
total.pig <-product[which(product$item==514),] # 돼지고기 먹방완료
region <- subset(code, code$구분코드설명=="지역코드") # 지역코드 추출 완료
str(region)
colnames(region) <- c('code', 'exp', 'region', 'name')
day.pig <- merge(total.pig, region, by="region", all=T) # 지역별 돼지고기 먹방완료
total.pig.mean <- dlply(ddply(ddply(day.pig, .(date), summarise, name=name, region=region, price=price),.(date, name), summarise, mean.price=mean(price)), .(name))
total.pig.mean$수원
library(doBy)
total.pig.mean = summaryBy(price~date+name, day.pig, FUN = mean)
arrange(day.pig, name, desc(date)) # data sort
day.pig  <- day.pig [! day.pig$name %in% c("의정부","용인","창원","안동","포항","순천","춘천" ),] # data except
day.pig$date = ymd(day.pig$date)
day.pig$date_month = months(ymd(day.pig$date))
day.pig$date_year = year(ymd(day.pig$date))
pig.region.daily.mean = summaryBy(price~date+name, day.pig, FUN = mean)
pig.region.monthly.mean = summaryBy(price~date_month+name, day.pig, FUN = mean)
pig.region.yearly.mean = summaryBy(price~date_year+name, day.pig, FUN = mean)
library(ggplot2)
city1 = subset(pig.region.daily.mean, pig.region.daily.mean$name=="서울 ")
city2 = subset(pig.region.daily.mean, pig.region.daily.mean$name=="부산")
city3 = subset(pig.region.daily.mean, pig.region.daily.mean$name=="대구")
city4 = subset(pig.region.daily.mean, pig.region.daily.mean$name=="인천")
city5 = subset(pig.region.daily.mean, pig.region.daily.mean$name=="광주")
city6 = subset(pig.region.daily.mean, pig.region.daily.mean$name=="대전")
city7 = subset(pig.region.daily.mean, pig.region.daily.mean$name=="울산")
city8 = subset(pig.region.daily.mean, pig.region.daily.mean$name=="수원")
city9 = subset(pig.region.daily.mean, pig.region.daily.mean$name=="청주")
city10 = subset(pig.region.daily.mean, pig.region.daily.mean$name=="전주")
city11 = subset(pig.region.daily.mean, pig.region.daily.mean$name=="제주")
pig.region <- data.frame(서울=city1$price.mean,  부산=city2$price.mean,
대구=city3$price.mean, 인천=city4$price.mean, 광주=city5$price.mean,
대전=city6$price.mean, 울산=city7$price.mean, 수원=city8$price.mean,
청주=city9$price.mean, 전주=city10$price.mean, 제주=city11$price.mean)
write.csv(pig.region, "Data/pig.region.csv", fileEncoding="UTF-8")
write.csv(pig.region, "pig.region.csv", fileEncoding="UTF-8")
write.csv(pig.region.monthly.mean, "pig.region.monthly.mean.csv", fileEncoding="UTF-8")
product <- read.csv("pig.region.csv", header=T, sep=",", fileEncoding="UTF-8")
pig.region <- read.csv("pig.region.csv", header=T, sep=",", fileEncoding="UTF-8")
View(pig.region.daily.mean)
write.csv(pig.region.daily.mean, "pig.region.daily.mean.csv", fileEncoding="UTF-8")
product <- read.csv("product_2015_data/product.csv", header=T, sep=",", fileEncoding="UTF-8")
code <- read.csv("product_2015_data/code.csv", header=T, sep=",", fileEncoding="UTF-8")
colnames(product) <- c('date','category','item','region','mart','price')
temp = summaryBy(price~item+date, product, FUN = mean) # 1번 방법
category <- subset(code, code$구분코드설명=="품목코드")
colnames(category) <- c('code', 'exp', 'item', 'name')
date.item.mean <- merge(temp, category, by="item") # temp에다가 카테고리 정보를 merge함.
date.item.mean$month <- str_sub(as.character.Date(temp$date),1,7)
month.item.mean <- summaryBy(price.mean~month+name+item, date.item.mean, FUN = mean)
colnames(month.item.mean) <- c("month", "name", "item", "price.mean")
date.item.mean$name
date.item.mean <- droplevels(date.item.mean) # date.item.mean의 name의 level중 쓰레기값 제거(안쓰는데 들어온 애들이 있음)
date.item.mean$name
temp <- split(date.item.mean, date.item.mean$name)
daily.product <- data.frame(쌀=temp$쌀$price.mean,   배추=temp$배추$price.mean,
상추=temp$상추$price.mean, 호박=temp$호박$price.mean,
양파=temp$양파$price.mean, 파프리카=temp$파프리카$price.mean,
참깨=temp$참깨$price.mean, 사과=temp$사과$price.mean,
돼지고기=temp$돼지고기$price.mean,   닭고기=temp$닭고기$price.mean)
month.item.mean$name
month.item.mean <- droplevels(month.item.mean)
temp <- split(month.item.mean, month.item.mean$name)
monthly.product <- data.frame(쌀=temp$쌀$price.mean,   배추=temp$배추$price.mean,
상추=temp$상추$price.mean, 호박=temp$호박$price.mean,
양파=temp$양파$price.mean, 파프리카=temp$파프리카$price.mean,
참깨=temp$참깨$price.mean, 사과=temp$사과$price.mean,
돼지고기=temp$돼지고기$price.mean,   닭고기=temp$닭고기$price.mean)
write.csv(month.item.mean, "month.item.mean.csv", fileEncoding="UTF-8")
write.csv(date.item.mean, "date.item.mean.csv", fileEncoding="UTF-8")
pig.region <- read.csv("pig.region.csv", header=T, sep=",", fileEncoding="UTF-8")
month.item.mean <- read.csv("month.item.mean.csv", header=T, sep=",", fileEncoding="UTF-8")
date.item.mean <- read.csv("date.item.mean.csv", header=T, sep=",", fileEncoding="UTF-8")
library(plyr); library(ggplot2); library(stringr); library(zoo);  library(TSclust)
install.packages("TSclust")
library(plyr); library(ggplot2); library(stringr); library(zoo);  library(TSclust)
install.packages("TSclust")
Sys.setlocale("LC_ALL", "ko_KR.UTF-8") # 한글 인코딩 가능하게 해줌
install.packages("TSclust")
library(plyr); library(ggplot2); library(stringr); library(zoo);  library(TSclust)
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
library(rJava)
library(plyr); library(ggplot2); library(stringr); library(zoo);  library(TSclust)
install.packages("TSclust")
library(plyr); library(ggplot2); library(stringr); library(zoo);  library(TSclust)
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
library(plyr); library(ggplot2); library(stringr); library(zoo);  library(TSclust)
library(plyr); library(ggplot2); library(stringr); library(zoo);  library(TSclust)
farm.product <- data.frame(쌀=temp$쌀$price.mean,   배추=temp$배추$price.mean,
상추=temp$상추$price.mean, 호박=temp$호박$price.mean,
양파=temp$양파$price.mean, 파프리카=temp$파프리카$price.mean,
참깨=temp$참깨$price.mean, 사과=temp$사과$price.mean,)
temp <- split(date.item.mean, date.item.mean$name)
farm.product <- data.frame(쌀=temp$쌀$price.mean,   배추=temp$배추$price.mean,
상추=temp$상추$price.mean, 호박=temp$호박$price.mean,
양파=temp$양파$price.mean, 파프리카=temp$파프리카$price.mean,
참깨=temp$참깨$price.mean, 사과=temp$사과$price.mean)
library(TSclust)
cor(farm.product$쌀, farm.product$배추)
cor(farm.product)
h1 <- hclust(corr, method = 'single')
corr <- cor(farm.product)
h1 <- hclust(corr, method = 'single')
View(corr)
View(corr)
corr <- cor(farm.product)
d <- dist(corr, method = 'euclidean')
h1 <- hclust(d, method = 'single')
h1
plot(h1)
plot(h1, family = "AppleGothic")
ggplot(month.item.mean[month.item.mean$name %in% c("상추", "호박", "파프리카"),],
aes(x=month, y=mean.price, colour=name, group=name)) + geom_line() +
theme_bw() + geom_point(size=6, shape=20, alpha=0.5) +
ylab("가격") + xlab("")
ggplot(month.item.mean[month.item.mean$name %in% c("상추", "호박", "파프리카"),],
aes(x=month, y=price.mean, colour=name, group=name)) + geom_line() +
theme_bw() + geom_point(size=6, shape=20, alpha=0.5) +
ylab("가격") + xlab("")
ggplot(month.item.mean[month.item.mean$name %in% c("상추", "호박", "파프리카"),],
aes(x=month, y=price.mean, colour=name, group=name)) + geom_line() +
theme_bw() + geom_point(size=6, shape=20, alpha=0.5) +
ylab("가격") + xlab("") + theme_bw(base_family = "AppleGothic") + scale_x_date()
ggplot(month.item.mean[month.item.mean$name %in% c("상추", "호박", "파프리카"),],
aes(x=month, y=price.mean, colour=name, group=name)) + geom_line() +
theme_bw() + geom_point(size=6, shape=20, alpha=0.5) +
ylab("가격") + xlab("") + theme_bw(base_family = "AppleGothic")
View(corr)
a <- c(1,6)
b <- c(2,4)
c <- c(5,7)
d <- c(3,5)
e <- c(5,2)
f <- c(5,1)
c_data <- data.frame(a,b,c,d,e,f)
c_data <- t(c_data) # col, row trans
d <- dist(c_data, method = 'euclidean')
h1 <- hclust(d, method = 'single')
d
c_data
corr <- cor(farm.product)
View(corr)
d <- dist(farm.product, method = 'euclidean')
h1 <- hclust(d, method = 'single')
plot(h1, family = "AppleGothic")
corr <- cor(farm.product)
View(corr)
c_data <- data.frame(a,b,c,d,e,f)
c_data <- t(c_data) # col, row trans
c_data
c_data
c_data <- t(c_data) # col, row trans
c_data
d <- dist(c_data, method = 'euclidean')
d
d <- dist(corr, method = 'euclidean')
d
corr
c_data <- data.frame(a,b,c,d,e,f)
c_data <- t(c_data) # col, row trans
c_data
d <- dist(c_data, method = 'euclidean')
c_data <- t(c_data) # col, row trans
c_data
View(c_data)
d <- dist(c_data, method = 'euclidean')
d
corr <- cor(farm.product)
d <- dist(corr, method = 'euclidean')
d
corr
d
View(corr)
c_data <- data.frame(a,b,c,d,e,f)
c_data <- t(c_data) # col, row trans
c_data
c_data <- data.frame(a,b,c,d,e,f)
c_data <- t(c_data) # col, row trans
c_data
corr <- cor(farm.product)
corr
View(farm.product)
t_farm_product <- t(farm.product)
View(t_farm_product)
d <- dist(t_farm_product, method = 'euclidean')
h1 <- hclust(d, method = 'single')
plot(h1, family = "AppleGothic")
View(t_farm_product)
d
View(t_farm_product)
corr <- cor(farm.product)
View(corr)
t_farm_product <- t(farm.product)
d <- dist(t_farm_product, method = 'euclidean')
d
d <- dist(farm.product, method = 'euclidean')
d
d <- dist(t_farm_product, method = 'euclidean')
d
corr <- cor(farm.product)
d <- dist(corr, method = 'euclidean')
h1 <- hclust(d, method = 'single')
plot(h1, family = "AppleGothic")
View(corr)
d
corr <- cor(farm.product)
d <- dist(corr, method = 'euclidean')
corr
d
View(corr)
h1 <- hclust(corr, method = 'single')
d
corr
str(corr)
str(d)
d
as.dist(corr)
h1 <- hclust(d, method = 'single')
plot(h1, family = "AppleGothic")
corr <- cor(farm.product)
d <- as.dist(corr)
h1 <- hclust(d, method = 'single')
plot(h1, family = "AppleGothic")
d <- as.dist(corr)
d
d <- dist(corr, method = 'euclidean')
d
h1 <- hclust(d, method = 'single')
plot(h1, family = "AppleGothic")
d <- as.dist(corr)
d <- dist(corr, method = 'euclidean')
d
corr <- cor(farm.product)
d <- as.dist(corr)
d
h1 <- hclust(d, method = 'single')
plot(h1, family = "AppleGothic")
h1 <- hclust(d, method = 'average')
plot(h1, family = "AppleGothic")
h1 <- hclust(d, method = 'single')
plot(h1, family = "AppleGothic")
View(corr)
library(TSclust)
ggplot(month.item.mean[month.item.mean$name %in% c("상추", "호박", "파프리카"),],
aes(x=month, y=price.mean, colour=name, group=name)) + geom_line() +
theme_bw() + geom_point(size=6, shape=20, alpha=0.5) +
ylab("가격") + xlab("") + theme_bw(base_family = "AppleGothic")
install.packages("rgl")
library(TSclust)
library(rgl)
dyn.load("/Library/Frameworks/R.framework/Versions/3.4/Resources/library/rgl/libs/rgl.so")
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
dyn.load("/Library/Frameworks/R.framework/Versions/3.4/Resources/library/rgl/libs/rgl.so")
library(mlbench)
library(corrplot)
data(PimaIndiansDiabetes)
plot1 <- corrplot(cor(PimaIndiansDiabetes[,!(names(PimaIndiansDiabetes) %in% c("diabetes"))]),
method="square",
order="hclust", tl.cex=0.7, cl.cex=0.5, tl.col="black", addrect=2)
cor.info <- cor(PimaIndiansDiabetes[,!(names(PimaIndiansDiabetes) %in% c("diabetes"))])
sim.by.hclust <- hclust(dist(cor.info))
plot(sim.by.hclust)
cor.info
corr <- cor(farm.product)
d <- dist(corr)
h <- hclust(d)
plot(h)
plot(h, family="AppleGothic")
