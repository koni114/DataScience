x = strata(c("Species"),
size = c(3, 3, 3),
method = "srswor",
data = iris)
x
x = strata(c("Species"),
size = c(3, 3, 1),
method = "srswor", # srswor : replace F // srswr : replace T
data = iris)
x
x = strata(c("Species", "Petal.Length"),
size = c(3, 3, 1),
method = "srswor", # srswor : replace F // srswr : replace T
data = iris)
x = strata(c("Species"),
size = c(3, 3, 1),
method = "srswor", # srswor : replace F // srswr : replace T
data = iris)
x
getdata(iris,x)
rep(c(3,7), c(3,2))
rep(c(3,7), c(3,2))
rep(c(3,7), each=3)
rep(1:15, length.out=15)
rep(1:10, length.out=15)
strata(c("Species", "Species2"), size=c(1,1,1,1,1,1), method="srswr", data=iris)
iris$Species2 = rep(1:2, 75)
strata(c("Species", "Species2"), size=c(1,1,1,1,1,1), method="srswr", data=iris)
rep(1:2, 75)
rep(1:2, 75)
rep(1:2, 75)
strata(c("Species", "Species2"), size=c(1,1,1,1,1,1), method="srswr", data=iris)
strata(c("Species", "Species2"), size=c(2,1,1,1,1,1), method="srswr", data=iris)
strata(c("Species", "Species2"), size=c(5,1,1,1,1,1), method="srswr", data=iris)
library(doBy)
sampleBy(~Species+Species2, frac = 0.3, data = A1)
View(A1)
for (i in seq(sample(1:10, 1)))
seq(sample(1:10, 1))
seq(sample(1:10, 1))
seq(sample(1:10, 1))
seq(sample(1:10, 1))
seq(sample(1:10, 1))
d1 = data.frame()
for (i in seq(sample(1:10, 1))){
print(i)
#d2 = iris[i, ]
}
for (i in seq(sample(1:10, 1))){
print(i)
#d2 = iris[i, ]
}
for (i in seq(sample(1:10, 1))){
d2 = iris[i, ]
d1 = rbind(d1, d2)
}
d1 = data.frame()
for (i in seq(sample(1:10, 1))){
d2 = iris[i, ]
d1 = rbind(d1, d2)
}
d1
d <- data.frame(x=c("1","2","2","1"), y=c("A","B","A","B"), num=c(3,5,8,7))
d
table(d$x, d$y)
d$x
d$y
table(d$x, d$y)
d_bind = rbind(d,d)
table(d_bind$x, d_bind$y)
View(d_bind)
xtabs(num ~ x+y, data=d_bind)
View(d_bind)
table(d_bind$x)
table(d_bind$x, d_bind$y)
xtabs(num ~ x+y, data=d)
View(d)
xt = xtabs(num ~ x+y, data=d)
margin.table(xt)
xt = xtabs(num ~ x+y, data=d_bind)
margin.table(xt)
sum(xt)
margin.table(xt)
margin.table(xt, 1)
margin.table(xt, 2)
xt
d1
prop.table(xt, 1)
tot = sum(xt)
p_xt = prop.table(xt)
str(p_xt)
p_xt
m_xt = as.matrix(p_xt)
str(m_xt)
m_xt
m_xt = as.matrix(p_xt)
str(m_xt)
tot*p_xt[[1]][1]
p_xt[[1]][1]
str(p_xt)
p_xt
data("survey")
data(survey)
library(MASS)
data('survey')
View(survey)
xt = xtabs(~Sex+Enter, data = survey)
xt = xtabs(~Sex+Exer, data = survey)
xt
View(survey)
chi1 = chisq.test(xt)
chi1
str(chi1)
chi1$statistic
str(chi1)
fisher.test(xt)
chi1 = chisq.test(xt) # ???
chi1
fisher.test(xt)
fisher.test(xtabs(~W.Hnd+Clap, data = survey))
A1
View(A1)
iris$Species2 = rep(1:2, 75)
strata(c("Species", "Species2"), size=c(5,1,1,1,1,1), method="srswr", data=iris)
sampleBy(~Species+Species2, # ???
frac = 0.3,
data = A1)
sampleBy(~Species+Species2, # ???
frac = 0.3,
data = iris)
table(iris)
table(iris$Species)
table(iris$Species+Species2)
iris$Species2 = rep(1:2, 75)
table(iris$Species+Species2)
table(iris$Species)
table(iris$Species2)
table(iris$Species)
sampleBy(~Species+Species2, # ???
frac = 0.3,
data = iris)
sampleBy(~Species+Species2+Sepal.Length, # ???
frac = 0.3,
data = iris)
sampleBy(~Species+Species2, # ???
frac = 0.3,
data = iris)
te = sampleBy(~Species+Species2, # Spcecies 1, 2 를 묶은것을 하나의 그룹으로 보는 것.
frac = 0.3,
data = iris)
table(te)
str(te)
te = sampleBy(~Species+Species2, # Spcecies 1, 2 를 묶은것을 하나의 그룹으로 보는 것.
frac = 0.3,
data = iris)
te
d1 = data.frame()
for (i in seq(sample(1:10, 1))){
d2 = iris[i, ]
d1 = rbind(d1, d2)
}
d1
xt = xtabs(~Sex+Exer, data = survey)
View(survey)
View(xt)
xt
chi1 = chisq.test(xt) # ???
chi1
str(chi1)
chi1$statistic
chi1
str(chi1)
var.test(x=data1, y=data2)
data1 = rnorm(100, mean=180, sd=10)
t.test(x=data1, mu=180)
t.test(x=data1, mu=200)
data2 = rnorm(100, mean=160, sd=5)
var.test(x=data1, y=data2)
t.test(x=data1, y=data2, var.equal = F)
chi1
str(chi1)
chi1$statistic
fisher.test(xtabs(~W.Hnd+Clap, data = survey)) # ???
cars
plot(cars)
cor.test(cars)
cor.test(cars$speed, cars$dist)
lm(dist~speed, cars)
model1 = lm(dist ~ speed, cars)
model1
str(model)
str(model1)
plot(iris)
a = plot(iris)
str(a)
summary(model1)
plot(model1)
plot(model1)
plot(model1, which=1)
plot(model1, which=1)
plot(model1, which=1:6)
plot(model1, which=1, xlim=c(20,60))
par(mfrow = c(1, 2))
plot(model1, which = c(4, 6))
library(car)
durbinWatsonTest(model1$residuals)
predict(model1, newdata = data.frame(speed=c(3,7)))
n = nrow(iris)
ind = sample(1:n, n*0.7, replace = F)
set.seed(200)
ind = sample(1:n, n*0.7, replace = F)
n = nrow(iris)
set.seed(200)
ind = sample(1:n, n*0.7, replace = F)
train = iris[ind,]
test = iris[-ind,]
lm(Sepal.Length ~ Sepal.Width + Petal.Length, Petal.Width, train)
lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, train)
model2 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, train)
summary(model2)
plot(model2)
par(mfrow = c(2, 2))
plot(model2)
durbinWatsonTest(model2)
durbinWatsonTest(model2$residuals)
vif(model2)
model3 = model2 = lm(Sepal.Length ~ Sepal.Width, train)
summary(model3)
plot(train$Sepal.Length, train$Sepal.Width)
model1 = lm(dist ~ speed, cars)
par(mfrow = c(2, 2))
plot(model1)
model3 = model2 = lm(Sepal.Length ~ Sepal.Width, train)
summary(model3)
plot(train$Sepal.Length, train$Sepal.Width)
cor.test(train[, 2:4])
model4 = lm(Sepal.Length ~ Sepal.Width + Petal.Length, train)
summary(model4)
cor(train[, 2:4])
library(mlbench)
data("BostonHousing")
m <- lm(medv ~., data = BostonHousing)
m2 <- step(, direction = "both")
m <- lm(medv ~., data = BostonHousing)
m2 <- step(m, direction = "both")
data("BostonHousing")
m <- lm(medv ~., data = BostonHousing)
m2 <- step(m, direction = "both")
summary(m)
summary(m)
m2 <- step(m, direction = "both")
summary(m2)
m2 <- step(m, direction = "both")
steplm(medv~1, BostonHousing), direction = 'forward', scope = "~chas + crim + zn + b + tax + rad + nox + ptratio + dis + rm + latat")
m3 = step(lm(medv~1, BostonHousing), direction = 'forward', scope = "~chas + crim + zn + b + tax + rad + nox + ptratio + dis + rm + latat")
m3 = step(lm(medv~1, BostonHousing), direction = 'forward', scope = "~chas + crim + zn + b + tax + rad + nox + ptratio + dis + rm + lstat")
m <- lm(medv ~., data = BostonHousing)
m2 <- step(m, direction = "both")
m3 = step(lm(medv~1, BostonHousing), direction = 'forward', scope = "~chas + crim + zn + b + tax + rad + nox + ptratio + dis + rm + lstat")
m2 <- step(m, direction = "both")
outlierTest(model1)
model1 = lm(dist ~ speed, cars)
n = nrow(iris)
set.seed(200)
ind = sample(1:n, n*0.7, replace = F)
train = iris[ind,]
test = iris[-ind,]
model2 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, train)
model3 = lm(Sepal.Length ~ Sepal.Width, train)
model4 = lm(Sepal.Length ~ Sepal.Width + Petal.Length, train)
m <- lm(medv ~., data = BostonHousing)
m2 <- step(m, direction = "both")
m3 = step(lm(medv~1, BostonHousing), direction = 'forward', scope = "~chas + crim + zn + b + tax + rad + nox + ptratio + dis + rm + lstat")
outlierTest(model1)
outlierTest(m)
o1 = outlierTest(m)
o1$rstudent
names(o1$rstudent)
as.numeric(names(o1$rstudent))
o2 = as.numeric(names(o1$rstudent))
B2 = BostonHousing[-o2]
summary(m3)
summary(m2)
B2 = BostonHousing[-o2,]
B2 = BostonHousing[-o2]
B2 = BostonHousing[-o2,]
o2
View(BostonHousing)
install.packages("mixlm")
library(mixlm)
predict(model1, newdata = test)
n = nrow(iris)
set.seed(200)
ind = sample(1:n, n*0.7, replace = F)
train = iris[ind,]
test = iris[-ind,]
predict(model1, newdata = test)
pred1 = predict(model2, newdata = test)
pred2 = predict(model4, newdata = test)
mse = mean((test$Sepal.Length - pred1)^2) # 잔차제곱평균
rmse = sqrt(mse)
mse
rmse
mse1 = mean((test$Sepal.Length - pred1)^2) # 잔차제곱평균
rmse1 = sqrt(mse)
mse1 = mean((test$Sepal.Length - pred1)^2) # 잔차제곱평균
rmse1 = sqrt(mse1)
mse2 = mean((test$Sepal.Length - pred2)^2)
rmse2 = sqrt(mse2)
c(mse1, mse2, rmse1, rmse2)
dummy1 = lm(Sepal.Length~., train)
summary(dummy1)
summary(d1)
d1 = lm(Sepal.Length~., train)
summary(d1)
nlevels(train$Species)
levels(train$Species)
d1 = statt::lm(Sepal.Length~., train)
d1 = stats::lm(Sepal.Length~., train)
summary(d1)
d1 = lm(Sepal.Length~., train)
summary(d1)
cbind(test$Species, as.numeric(test$Species))
cbind(test$Species, as.numeric(test$Species))
cbind(test$Species, as.numeric(test$Species))
summary(d1)
d1 = lm(Sepal.Length~., train)
summary(d1)
d1 = stats::lm(Sepal.Length~., train)
summary(d1)
install.packages("dummies")
2<-dummy.data.frame(iris)
d2<-dummy.data.frame(iris)
library(dummies)
d2<-dummy.data.frame(iris)
d2
d1 = lm(Sepal.Length~., d2)
d1
d1 = dummy.lm(Sepal.Length~., d2)
d2
d1 = lm(Sepal.Length~., d2)
d1
sample(0:2pi, 1000, replace=T)
x = sample(0:2pi, 1000, replace=T)
pi
x = sample(0:2*pi, 1000, replace=T)
x
y = sin(x)
y_e = y+e
e = rnorm(1000, 0, 1)
y_e = y+e
y_e
plot(x, y_e)
x1=seq(0, 2*pi, 0.01)
x1
x1 = seq(0, 2*pi, 0.01)
e1 = rnorm(50, 0, 1)
y1 = sin(x)
y1
y1 = sin(x1)
y1
x = sample(0:2*pi, 1000, replace=T)
x
y = sin(x)
e = rnorm(1000, 0, 1)
y_e = y+e
plot(x, y_e)
x1 = seq(0, 2*pi, 0.01)
data = data.frame()
for(i in x1){
e1 = rnorm(50, 0, 1)
y1 = sin(i) + e1
x2 = rep(i, 50)
data1 = cbind(x2, y)
data = rbind(data, data1)
}
plot(data, cex=0.1)
x1 = seq(0, 2*pi, 0.01)
data = data.frame()
for(i in x1){
e1 = rnorm(50, 0, 1)
y1 = sin(i) + e1
x2 = rep(i, 50)
data1 = cbind(x2, y)
data = rbind(data, data1)
}
plot(data, cex=0.1)
x1 = seq(0, 2*pi, 0.01)
data = data.frame()
for(i in x1){
e1 = rnorm(50, 0, 1)
y1 = sin(i) + e1
x2 = rep(i, 50)
data1 = cbind(x2, y1)
data = rbind(data, data1)
}
plot(data, cex=0.1)
non1 = lm(y1~x2, data)
line(data$x2, non1$fitted.values)
line(data$x2, non1$fitted.values, col=red)
line(data$x2, non1$fitted.values, col='red')
abline(data, col='red')
abline(non1, col='red')
install.packages('e1071')
library(e1071)
svm1 = svm(y1~x2, data) # 참고 : svm은 svc, scr로 classification / regression 용으로 나뉨.
pred1 = predict(svm1, newdata = data)
points(data$x2, pred1, col = 'red', pch = "*", cex = 0.3)
points(data$x1, pred1, col = 'red', pch = "*", cex = 0.3)
View(data)
x1 = seq(0, 2*pi, 0.01)
x1
x2 = rep(4.16, 50)
x2
points(data$x2, sin(data$x2), col='blue', pch="#", cex=0.4)
non_svm1 = lm(y1~x2, data)
predict(non_svm1, newdata = data)
pred2 = predict(non_svm1, newdata = data)
rmse_s = sqrt(mean(data$y1-pred)^2)
rmse_s = sqrt(mean(data$y1-pred1)^2)
rmse_s = sqrt(mean(data$y1-pred1)^2)
rmse_n = sqrt(mean(data$y1-pred2)^2)
c(rmse_s, rmse_n)
summary(svm1)
summary(non_svm1)
svm2 = svm(Species~., train)
pred3 = predict(svm2, newdata = test)
n = nrow(iris)
set.seed(200)
ind = sample(1:n, n*0.7, replace = F)
train = iris[ind,]
test = iris[-ind,]
svm2 = svm(Species~., train)
pred3 = predict(svm2, newdata = test)
table(test$Species pred3)
table(test$Species, pred3)
t1 = table(test$Species, pred3)
diag(t1) # table의 대각선 값을 추출하는 함수
sum(diag(t1)) / sum(t1)
x1 = seq(0, 2*pi, 0.01)
data = data.frame()
for(i in x1){
e1 = rnorm(10, 0, sample(1:3, 1, replace = T))
y1 = sin(i) + e1
x2 = rep(i, 10) # rep -> repeat의 약자
data1 = cbind(x2, y1)
data = rbind(data, data1)
}
plot(data, cex=0.1)
svm1 = svm(y1~x2, data)
pred1 = predict(svm1, newdata = data)
points(data$x2, pred1, col = 'red', pch = "*", cex = 0.3)
points(data$x2, sin(data$x2), col='blue', pch="#", cex=0.4)
y2 = data$y1 - pred1
data3 = cbind(data, y2)
svm_e = svm(y2~x2, data3)
pred4 = predict(svm_e, data3)
hat_y = pred1 + pred2
points(data3$x2, hat_y, coll='blue')
y2 = data$y1 - pred1
data3 = cbind(data, y2)
svm_e = svm(y2~x2, data3)
pred4 = predict(svm_e, data3)
hat_y = pred1 + pred2
points(data3$x2, hat_y, coll='blue')
setwd("/Users/yoon/Documents/DataScience/R_work")
product <- read.csv("product_2015_data/product.csv", header=T, fileEncoding="UTF-8")
product <- read.csv("product_2015_data/product.csv", header=T, fileEncoding="euc-kr")
code <- read.csv("product_2015_data/code.csv", header=T, fileEncoding="UTF-8")
setwd("/Users/yoon/Documents/DataScience/R_work")
library1 <- c("plyr", "ggplot2", "stringr", "zoo", "corrplot", "RColorBrewer")
unlist(lapply(library1, require, character.only=TRUE))
product <- read.csv("product_2015_data/product.csv", header=T, fileEncoding="UTF-8")
product <- read.csv("product_2015_data/product.csv", header=T, fileEncoding="UTF-8")
code <- read.csv("product_2015_data/code.csv", header=T, fileEncoding="UTF-8")
View(code)
product <- read.csv("product_2015_data/product.csv", header=T, sep=",", fileEncoding="UTF-8")
code <- read.csv("product_2015_data/code.csv", header=T, sep=",", fileEncoding="UTF-8")
Sys.setlocale("LC_ALL", "ko_KR.UTF-8") # 한글 인코딩 가능하게 해줌
product <- read.csv("product_2015_data/product.csv", header=T, sep=",", fileEncoding="UTF-8")
code <- read.csv("product_2015_data/code.csv", header=T, sep=",", fileEncoding="UTF-8")
weather <- read.csv("product_2015_data/weather", header=T, sep=",", fileEncoding="UTF-8")
weather <- read.csv("product_2015_data/weather.csv", header=T, sep=",", fileEncoding="UTF-8")
summarise(product)
summary(product)
str(product)
table(product)
table(product$일자)
table(product$부류코드)
summary(weather)
View(weather)
head(weather)
View(product)
colnames(product) <- c('date','category','item','region','mart','price')
View(product)
View(code)
View(code)
category <- subset(code, code$구분코드설명=="품목코드")
View(category)
View(product)
View(category)
colnames(category) <- c('code', 'exp', 'item', 'name')
View(category)
View(product)
View(category)
total.pig <-product[which(product$item==514),]
View(total.pig)
View(code)
View(code)
region <- subset(code, code$구분코드설명=="지역코드") #
View(region)
View(code)
