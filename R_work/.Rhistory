rnorm(100, mean=0, sd=3)
x1 = rnorm(100, mean=0, sd=3)
x1
options(digits = 3)
x1 = rnorm(100, mean=0, sd=3)
x1
hist(x1)
plot(density(x1))
hist(x1)
plot(density(x1))
var(1)
var(x1)
mean(x1)
median(x1)
quantile(x1, c(0.25, 0.5, 0.75))
dpois(3,1)
q1 = quantile(1:10, c(1/4, 3/4))
str(q1)
q1
sample(1:10, 5)
sample(1:10, 5, replace = T, prob = 1:10) # prob는 가중치
ind1 = sample(nrow(iris), nrow(iris), replace = F)
A1 = iris[ind1]
A1 = iris[ind1,]
A1
n1 = nrow(iris)
train = A1[1:(n1*0.7),]
test = A1[-(1:(n1*0.7)),]
n1
ind3 = sample(2, n1, replace = T, prob = c(0.7, 0.3))
sample(2,10)
sample(2,10,replace = F)
ind3 = sample(2, 10, replace = T, prob = c(0.7, 0.3))
ind3 = sample(2, n1, replace = T, prob = c(0.7, 0.3))
ind3
ind3 = sample(3, n1, replace = T, prob = c(0.7, 0.3))
table(ind3)
train2 = iris[ind3 == 1]
train2 = iris[ind3 == 1,]
test2 = iris[ind3 == 2,]
install.packages('sampling')
library(sampling)
x = strata(c("Species"),
size = c(3, 3, 3),
method = "srswor",
data = iris)
x
x = strata(c("Species"),
size = c(3, 3, 1),
method = "srswor", # srswor : replace F // srswr : replace T
data = iris)
x
x = strata(c("Species", "Petal.Length"),
size = c(3, 3, 1),
method = "srswor", # srswor : replace F // srswr : replace T
data = iris)
x = strata(c("Species"),
size = c(3, 3, 1),
method = "srswor", # srswor : replace F // srswr : replace T
data = iris)
x
getdata(iris,x)
rep(c(3,7), c(3,2))
rep(c(3,7), c(3,2))
rep(c(3,7), each=3)
rep(1:15, length.out=15)
rep(1:10, length.out=15)
strata(c("Species", "Species2"), size=c(1,1,1,1,1,1), method="srswr", data=iris)
iris$Species2 = rep(1:2, 75)
strata(c("Species", "Species2"), size=c(1,1,1,1,1,1), method="srswr", data=iris)
rep(1:2, 75)
rep(1:2, 75)
rep(1:2, 75)
strata(c("Species", "Species2"), size=c(1,1,1,1,1,1), method="srswr", data=iris)
strata(c("Species", "Species2"), size=c(2,1,1,1,1,1), method="srswr", data=iris)
strata(c("Species", "Species2"), size=c(5,1,1,1,1,1), method="srswr", data=iris)
library(doBy)
sampleBy(~Species+Species2, frac = 0.3, data = A1)
View(A1)
for (i in seq(sample(1:10, 1)))
seq(sample(1:10, 1))
seq(sample(1:10, 1))
seq(sample(1:10, 1))
seq(sample(1:10, 1))
seq(sample(1:10, 1))
d1 = data.frame()
for (i in seq(sample(1:10, 1))){
print(i)
#d2 = iris[i, ]
}
for (i in seq(sample(1:10, 1))){
print(i)
#d2 = iris[i, ]
}
for (i in seq(sample(1:10, 1))){
d2 = iris[i, ]
d1 = rbind(d1, d2)
}
d1 = data.frame()
for (i in seq(sample(1:10, 1))){
d2 = iris[i, ]
d1 = rbind(d1, d2)
}
d1
d <- data.frame(x=c("1","2","2","1"), y=c("A","B","A","B"), num=c(3,5,8,7))
d
table(d$x, d$y)
d$x
d$y
table(d$x, d$y)
d_bind = rbind(d,d)
table(d_bind$x, d_bind$y)
View(d_bind)
xtabs(num ~ x+y, data=d_bind)
View(d_bind)
table(d_bind$x)
table(d_bind$x, d_bind$y)
xtabs(num ~ x+y, data=d)
View(d)
xt = xtabs(num ~ x+y, data=d)
margin.table(xt)
xt = xtabs(num ~ x+y, data=d_bind)
margin.table(xt)
sum(xt)
margin.table(xt)
margin.table(xt, 1)
margin.table(xt, 2)
xt
d1
prop.table(xt, 1)
tot = sum(xt)
p_xt = prop.table(xt)
str(p_xt)
p_xt
m_xt = as.matrix(p_xt)
str(m_xt)
m_xt
m_xt = as.matrix(p_xt)
str(m_xt)
tot*p_xt[[1]][1]
p_xt[[1]][1]
str(p_xt)
p_xt
data("survey")
data(survey)
library(MASS)
data('survey')
View(survey)
xt = xtabs(~Sex+Enter, data = survey)
xt = xtabs(~Sex+Exer, data = survey)
xt
View(survey)
chi1 = chisq.test(xt)
chi1
str(chi1)
chi1$statistic
str(chi1)
fisher.test(xt)
chi1 = chisq.test(xt) # ???
chi1
fisher.test(xt)
fisher.test(xtabs(~W.Hnd+Clap, data = survey))
A1
View(A1)
iris$Species2 = rep(1:2, 75)
strata(c("Species", "Species2"), size=c(5,1,1,1,1,1), method="srswr", data=iris)
sampleBy(~Species+Species2, # ???
frac = 0.3,
data = A1)
sampleBy(~Species+Species2, # ???
frac = 0.3,
data = iris)
table(iris)
table(iris$Species)
table(iris$Species+Species2)
iris$Species2 = rep(1:2, 75)
table(iris$Species+Species2)
table(iris$Species)
table(iris$Species2)
table(iris$Species)
sampleBy(~Species+Species2, # ???
frac = 0.3,
data = iris)
sampleBy(~Species+Species2+Sepal.Length, # ???
frac = 0.3,
data = iris)
sampleBy(~Species+Species2, # ???
frac = 0.3,
data = iris)
te = sampleBy(~Species+Species2, # Spcecies 1, 2 를 묶은것을 하나의 그룹으로 보는 것.
frac = 0.3,
data = iris)
table(te)
str(te)
te = sampleBy(~Species+Species2, # Spcecies 1, 2 를 묶은것을 하나의 그룹으로 보는 것.
frac = 0.3,
data = iris)
te
d1 = data.frame()
for (i in seq(sample(1:10, 1))){
d2 = iris[i, ]
d1 = rbind(d1, d2)
}
d1
xt = xtabs(~Sex+Exer, data = survey)
View(survey)
View(xt)
xt
chi1 = chisq.test(xt) # ???
chi1
str(chi1)
chi1$statistic
chi1
str(chi1)
var.test(x=data1, y=data2)
data1 = rnorm(100, mean=180, sd=10)
t.test(x=data1, mu=180)
t.test(x=data1, mu=200)
data2 = rnorm(100, mean=160, sd=5)
var.test(x=data1, y=data2)
t.test(x=data1, y=data2, var.equal = F)
chi1
str(chi1)
chi1$statistic
fisher.test(xtabs(~W.Hnd+Clap, data = survey)) # ???
vif(model2) # 10이 넘는 값 두개가 있으므로 다중 공선성 문제 존재.
model3 = lm(Sepal.Length ~ Sepal.Width, train)
model1 = lm(dist ~ speed, cars)
library(car)
durbinWatsonTest(model1$residuals)
predict(model1, newdata = data.frame(speed=c(3,7)))
n = nrow(iris)
set.seed(200)
ind = sample(1:n, n*0.7, replace = F)
train = iris[ind,]
test = iris[-ind,]
model2 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, train)
summary(model2)
durbinWatsonTest(model2$residuals)
vif(model2) # 10이 넘는 값 두개가 있으므로 다중 공선성 문제 존재.
svm1 = svm(y1~x2, data)
library(e1071)
svm1 = svm(y1~x2, data)
library(car)
n = nrow(iris)
set.seed(200)
ind = sample(1:n, n*0.7, replace = F)
train = iris[ind,]
test = iris[-ind,]
model2 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, train)
model3 = lm(Sepal.Length ~ Sepal.Width, train)
model4 = lm(Sepal.Length ~ Sepal.Width + Petal.Length, train)
library(mlbench)
x = sample(0:2*pi, 1000, replace=T)
y = sin(x)
e = rnorm(1000, 0, 1)
y_e = y+e
y_e = y+e
x1 = seq(0, 2*pi, 0.01)
data = data.frame()
for(i in x1){
e1 = rnorm(10, 0, sample(1:3, 1, replace = T))
y1 = sin(i) + e1
x2 = rep(i, 10) # rep -> repeat의 약자
data1 = cbind(x2, y1)
data = rbind(data, data1)
}
library(e1071)
svm1 = svm(y1~x2, data)
pred1 = predict(svm1, newdata = data)
points(data$x2, pred1, col = 'red', pch = "*", cex = 0.3)
points(data$x2, sin(data$x2), col='blue', pch="#", cex=0.4)
plot(data, cex=0.1)
points(data$x2, pred1, col = 'red', pch = "*", cex = 0.3)
pred1 = predict(svm1, newdata = test)
txt = readLines('big.txt', encoding = "UTF-8")
length(txt) # vector data count
nrow(iris) # data frame count
length(iris) # data frame column count
buildDictionary(user_dic = data.frame(c("빅데이터", "ncn")), replace_usr_dic = F)
txt0 = str_to_lower(txt)
txt1 = gsub("빅데이타", "빅데이터", txt0)
txt1 = gsub("bigdata", "빅데이터", txt1)
txt1 = gsub("big data", "빅데이터", txt1)
txt1 = gsub("[[:digit:]]", "", txt1)
txt1 = gsub("[[A-z]]", "", txt1)
txt1 = gsub("[[:punct:]]", "", txt1)
txt1 = gsub("  ", " ", txt1)
txt2 = txt1[str_length(txt1)>1] # remove empty line
txt_e = extractNoun(txt2)
txt_t = table(unlist(txt_e))
txt_s = sort(txt_t, decreasing = T)
txt_s1 = txt_s[str_length(names(txt_s)) > 1] # remove one character words
txt_h = head(txt_s1, 5)
barplot(txt_h)
pal1 = brewer.pal(7, "Set1")
wordcloud(names(txt_s1),
txt_s1, # data : must be table class
scale=c(5, 0.5), # string size max, min
min.freq = 2, # word freq min
random.order = F, # location random
rot.per = 0.2, # rotation percent
family="AppleGothic")
library(KoNLP)
s2 = split(iris, iris$Species)
str(s2)
s2[1]
c(1:5, NA)
mean(c(1:5, NA), na.rm = T) # NA data remove
d <- matrix(1:9, ncol=3)
mean(d)
mean(d[1,])
for (i in 1:nrow(d)){
print(mean(d[i,]))
}
apply(d, 1, sum) # 1 : by row
apply(d, 2, sum) # 2 : by column (attributes = features)
tapply(iris$Sepal.Length, iris$Species, sum)
list_data1 <- list(a = 1:5, b = 6:10)
mapply(sum, list_data1$a, list_data1$b)
list_data1$a
list_data1$b
list_data1 <- list(a = 1:5, b = 6:11)
mapply(sum, list_data1$a, list_data1$b)
0
list_data1 <- list(a = 1:5, b = 6:10)
mapply(sum, list_data1$a, list_data1$b)
?summaryBy
??summaryBy
library(doBy)
summary(iris)
summaryBy(.~Species, iris) # 모든 attribute를 species를 기준으로 요약
summaryBy(Sepal.Length~Species, iris, FUN = median) # Sepallegnth를 species 기준으로 요약, median func로.
x_data = data.frame(a=c(3,2,9), b=c(5,3,2), c=c(4,5,7))
View(x_data)
View(x_data)
x_stack = stack(x_data)
View(x_stack)
View(x_stack)
summaryBy(values ~ ind, x_stack)
library("MASS")
data("survey")
str(survey)
View(survey)
model1 = t.test(Height ~ Sex, survey) # (A ~ B) 에서 A는 연속형, B는 factor형만 가능.
model1
library(MASS)
data('survey')
ss1 = survey[, "Height"]
survey
str(survey)
ss1 = survey[, "Height"]
ss1
ss1 = survey[survey$Sex=="Male", "Height"]
ss1
m1 = survey[survey$Sex=="Male", ]
m1
View(m1)
ss1
ss2 = na.omit(ss1)
ss2
ss2
View(sleep)
var.test(extra~group, data = sleep)
t.test(extra~group, var.equal = T, data = sleep)
t.test(extra~group, var.equal = T, data = sleep, paired = T)
setwd("/Users/yoon/Documents/DataScience/R_work")
options(digits = 3) # 소수점 이하 표시
set.seed(100)
x1 = rnorm(100, mean=0, sd=3)
hist(x1)
plot(density(x1)) # 확률밀도로 나타낸 것
var(x1)
mean(x1)
median(x1)
quantile(x1, c(0.25, 0.5, 0.75))
library(sampling)
x = strata(c("Species"),
size = c(3, 3, 1),
method = "srswor", # srswor : replace F // srswr : replace T
data = iris)
View(x)
View(x)
View(x)
iris$Species2 = rep(1:2, 75)
iris
strata(c("Species", "Species2"), size=c(5,1,1,1,1,1), method="srswr", data=iris)
strata(c("Species", "Species2"), size=c(10,1,1,1,1,1), method="srswr", data=iris)
sampleBy(~Species+Species2, # Spcecies 1, 2 를 묶은것을 하나의 그룹으로 보는 것.
frac = 0.3,
data = iris)
d <- data.frame(x=c("1","2","2","1"), y=c("A","B","A","B"), num=c(3,5,8,7))
View(d)
d_bind = rbind(d,d)
table(d_bind$x, d_bind$y)
View(d_bind)
xtabs(num ~ x+y, data=d)
View(d)
View(d)
View(d)
View(d_bind)
xt = xtabs(num ~ x+y, data=d_bind)
xt
View(d_bind)
library(MASS)
data('survey')
View(survey)
xt = xtabs(~Sex+Exer, data = survey)
xt
survey
xt
xt = xtabs(Sex~Exer, data = survey)
xt = xtabs(Sex~Exer, data = survey)
xt = xtabs(~Sex+Exer, data = survey)
View(survey)
cor.test(survey$Sex, survey$Exer)
xt
xt = xtabs(Sex~Exer, data = survey)
~Sex+Exer
xt = xtabs(~Sex+Exer, data = survey)
chi1 = chisq.test(xt) # p-value가 0.06, 즉 0.05 이상이므로 성별과 운동 빈도는 관계가 있는 것 같다.
chi1
fisher.test(xt)
t.test(xt)
xt
xt
model2 = aov(Sex ~ Exer, data=survey)
survey
data1 = rnorm(100, mean=180, sd=10)
t.test(x=data1, mu=180)
t.test(x=data1, mu=200)
var.test(x=data1, y=data2)
data2 = rnorm(100, mean=160, sd=5)
t.test(x=data1, y=data2, var.equal = F)
model1 = aov(Pulse ~ Exer, data=survey)
summary(model1)
library(reshape2)
g5 = melt(g4, id=1:17)
library(MASS)
data("survey")
View(survey)
model1 = aov(Pulse ~ Exer, data=survey)
summary(model1)
model2 = aov(Sepal.Length ~ Species, data=iris)
summary(model2)
model3 = aov(Pulse ~ Exer+Smoke, data=survey)
summary(model3)
model3 = aov(Pulse ~ Exer*Smoke, data=survey)
summary(model3)
t1 = TukeyHSD(model1, "Exer")
t1 # some-freq 의 경우 집단간의 심박수 차이가 있는 것.
survey
survey[c(3,10,11,15,22,25), "Sex"] = "Othes"
survey$Sex <- as.character(survey$Sex)
survey[c(3,10,11,15,22,25), "Sex"] = "Othes"
survey$Sex <- as.factor(survey$Sex)
View(survey)
xt = xtabs(~Sex+Exer, data = survey)
xt
chi1 = chisq.test(xt) # p-value가 0.06, 즉 0.05 이상이므로 성별과 운동 빈도는 관계가 있는 것 같다.
chi1
xt
x <- rnorm(1000, mean = 10, sd=1)
qqnorm(x) # 직선의 형태로 그려질수록 정규성을 띤다고 할 수 있다.
plot(density(x))
ks.test(rnorm(100), rnorm(100, 5, 3))
plot(rnorm(100))
plot(rnorm(100, 5, 3))
shapiro.test(rnorm(100))
shapiro.test(rnorm(100))
shapiro.test(rnorm(100))
shapiro.test(rnorm(100))
shapiro.test(rnorm(100))
t1 = TukeyHSD(model1, "Exer")
t1 # some-freq 의 경우 집단간의 심박수 차이가 있는 것.
