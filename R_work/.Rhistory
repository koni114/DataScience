h1 <- hclust(d, method = 'single')
plot(h1, family = "AppleGothic")
d <- as.dist(corr)
d
d <- dist(corr, method = 'euclidean')
d
h1 <- hclust(d, method = 'single')
plot(h1, family = "AppleGothic")
d <- as.dist(corr)
d <- dist(corr, method = 'euclidean')
d
corr <- cor(farm.product)
d <- as.dist(corr)
d
h1 <- hclust(d, method = 'single')
plot(h1, family = "AppleGothic")
h1 <- hclust(d, method = 'average')
plot(h1, family = "AppleGothic")
h1 <- hclust(d, method = 'single')
plot(h1, family = "AppleGothic")
View(corr)
library(TSclust)
ggplot(month.item.mean[month.item.mean$name %in% c("상추", "호박", "파프리카"),],
aes(x=month, y=price.mean, colour=name, group=name)) + geom_line() +
theme_bw() + geom_point(size=6, shape=20, alpha=0.5) +
ylab("가격") + xlab("") + theme_bw(base_family = "AppleGothic")
install.packages("rgl")
library(TSclust)
library(rgl)
dyn.load("/Library/Frameworks/R.framework/Versions/3.4/Resources/library/rgl/libs/rgl.so")
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
dyn.load("/Library/Frameworks/R.framework/Versions/3.4/Resources/library/rgl/libs/rgl.so")
library(mlbench)
library(corrplot)
data(PimaIndiansDiabetes)
plot1 <- corrplot(cor(PimaIndiansDiabetes[,!(names(PimaIndiansDiabetes) %in% c("diabetes"))]),
method="square",
order="hclust", tl.cex=0.7, cl.cex=0.5, tl.col="black", addrect=2)
cor.info <- cor(PimaIndiansDiabetes[,!(names(PimaIndiansDiabetes) %in% c("diabetes"))])
sim.by.hclust <- hclust(dist(cor.info))
plot(sim.by.hclust)
cor.info
corr <- cor(farm.product)
d <- dist(corr)
h <- hclust(d)
plot(h)
plot(h, family="AppleGothic")
setwd("C:/Users/ajou/Desktop/DataScience/R_work")
setwd("C:/Users/ajou/Desktop/DataScience/R_work")
library(plyr); library(ggplot2); library(stringr); library(zoo);  library(TSclust)
install.packages("zoo")
library(plyr); library(ggplot2); library(stringr); library(zoo);  library(TSclust)
install.packages("TSclust")
library(plyr); library(ggplot2); library(stringr); library(zoo);  library(TSclust)
pig.region <- read.csv("pig.region.csv", header=T, sep=",", fileEncoding="UTF-8")
month.item.mean <- read.csv("month.item.mean.csv", header=T, sep=",", fileEncoding="UTF-8")
date.item.mean <- read.csv("date.item.mean.csv", header=T, sep=",", fileEncoding="UTF-8")
library(plyr)
temp <- split(date.item.mean, date.item.mean$name)
farm.product <- data.frame(쌀=temp$쌀$price.mean,   배추=temp$배추$price.mean,
상추=temp$상추$price.mean, 호박=temp$호박$price.mean,
양파=temp$양파$price.mean, 파프리카=temp$파프리카$price.mean,
참깨=temp$참깨$price.mean, 사과=temp$사과$price.mean)
corr <- cor(farm.product)
View(corr)
d <- dist(corr)
h <- hclust(d)
plot(h, family="AppleGothic")
View(corr)
setwd("C:/Users/ajou/Desktop/DataScience/R_work")
teens = read.csv("snsdata.csv", header = T, stringsAsFactors = F, sep = ",")
View(teens)
table(teens$gender, useNA = "ifany")
summary(teens$age)
teens$age <- ifelse(teens$age >= 13 & teens$age < 20, teens$age, NA)
summary(teens$age)
table(teens$gender, useNA = "ifany")
teens$age <- ifelse(teens$age >= 13 & teens$age < 20, teens$age, NA)
View(teens)
View(teens)
teens$female <- ifelse(teens$gender == 'F', 1, 0)
teens$no_gender <- ifelse(is.na(teens$gender), 1, 0)
ave_age <- ave(teens$age, teens$gradyear, FUN = function(x) mean(x, na.rm = T))
teens$age <- ifelse(is.na(teens$age), ave_age, teens$age)
View(teens)
teens$age <- ifelse(is.na(teens$age), ave_age, teens$age)
View(teens)
table(teens$age, useNA = "ifany")
table(teens$age, useNA = "ifany")
length(which(teens$age == NA))
interests <- teens[, 5:40]
interests_z <- scale(interests)
teens_cluster <- kmeans(interests_z, 5)
table(teens_cluster$cluster)
teens_cluster$centers
teens_cluster
View(teens)
predict(teens_cluster, newdata = teens[,5:40])
teens_cluster$cluster
teens$cluster <- teens_cluster$cluster
View(teens)
aggregate(data=teens, age ~ cluster, mean)
data = iris[1:100]
data = iris[1:100,]
data = iris[1:100, ]
data1 = iris[1:100, ]
levels(data1$Species)
table(data1)
table(data1)
table(data1$Species)
str(data1)
data1$Species=factor(data1$Species)
levels(data1$Species)
table(data1$Species)
m <- glm(Species~., data = data1, family = "binomial")
m
set.seed(1000)
ind = sample(1:nrow(data1),
nrow(data1)*0.7,
replace = F)
train = data1[ind, ]
test = data1[-ind, ]
m <- glm(Species~., data = data1, family = "binomial")
m <- glm(Species~., data = train, family = "binomial")
m$fitted.values
train_y = ifelse(m$fitted.values>=0.5, 2, 1)
table(train_y)
m <- glm(Species~., data = train, family = "binomial")
m <- glm(Species~., data = data1, family = "binomial")
m
m$fitted.values
table(train$Species, train_y)
train$Species
train_y
table(train$Species, train_y)
pred1 = predict(m, newdata = test, type = 'response')
pred_label = ifelse(pred1 >= 0.5, 2, 1)
table(test$Species, pred_label)
View(test)
pred_label
test$label = pred_label
View(test)
View(test)
pred1 = predict(m, newdata = test)
pred1
pred1
pred1 = predict(m, newdata = test, type = 'response')
pred1
library(nnet)
m <- multinom(Species~., data=train)
m$fitted.values
(m <- multinom(Species~., data=train))
m$fitted.values
(m <- multinom(Species~., data=train))
m$fitted.values
(m <- multinom(Species~., data=train))
m$fitted.values
data1 = iris[1:100, ]
data1$Species=factor(data1$Species)
set.seed(1000)
ind = sample(1:nrow(data1),
nrow(data1)*0.7,
replace = F)
train = data1[ind, ]
test = data1[-ind, ]
(m <- multinom(Species~., data=train))
m$fitted.values
m_class <- max.col(m$fitted.values)
m_class
View(train)
multinom(Species~., data=train)
m <- multinom(Species~., data=train)
m$fitted.values
library(nnet)
(m <- multinom(Species~., data=train))
m$fitted.values
(m <- multinom(Species~., data=train, family="binomial"))
m$fitted.values
(m <- multinom(Species~., data=train))
m$fitted.values
m_class <- max.col(m$fitted.values)
(m <- multinom(Species~., data=train))
m$fitted.values
m_class <- max.col(m$fitted.values)
table(m_class)
table(train$Species, m_class)
pred3 = predict(m, newdata = test, type = 'class')
table(pred3)
table(test$Species, pred3)
set.seed(1000)
ind = sample(1:nrow(iris),
nrow(iris)*0.7,
replace = F)
train = data1[iris, ]
test = data1[-iris, ]
library(nnet)
(m <- multinom(Species~., data=train))
m$fitted.values
m_class <- max.col(m$fitted.values)
table(m_class)
table(train$Species, m_class)
pred3 = predict(m, newdata = test, type = 'class')
table(pred3)
table(test$Species, pred3)
set.seed(1000)
ind = sample(1:nrow(iris),
nrow(iris)*0.7,
replace = F)
train = iris[ind, ]
test = iris[-ind, ]
library(nnet)
(m <- multinom(Species~., data=train))
m$fitted.values
m_class <- max.col(m$fitted.values)
table(m_class)
table(train$Species, m_class)
pred3 = predict(m, newdata = test, type = 'class')
table(pred3)
table(test$Species, pred3)
library(mlbench)
install.packages("mlbench")
Sonar
data(Sonar)
library(mlbench)
data(Sonar)
View(Sonar)
summary(Sonar)
View(Sonar)
Sonar <- scale(Sonar)
Sonar[, 1:60] <- scale(Sonar[, 1:60])
View(Sonar)
ind = sample(1:nrow(Sonar),
nrow(Sonar)*0.7,
replace = F)
train = Sonar[ind, ]
test = Sonar[-ind, ]
View(Sonar)
m <- glm(Class~., data = train, family = "binomial")
model <- glm(Class~., data = train, family = "binomial")
model <- glm(Class~., data = train, family = "binomial")
pred3 = predict(model, newdata = test, type = 'response')
pred_label = ifelse(pred1 >= 0.5, 2, 1)
pred_label = ifelse(pred3 >= 0.5, 2, 1)
table(Sonar$Class ,pred_label)
pred_label = ifelse(pred3 >= 0.5, 2, 1)
table(Sonar$Class, pred_label)
model <- glm(Class~., data = train, family = "binomial")
pred3 = predict(model, newdata = test, type = 'response')
pred_label = ifelse(pred3 >= 0.5, 2, 1)
table(Sonar$Class, pred_label)
table(test$Class, pred_label)
t1 = table(test$Class, pred_label)
diag(t1) # table의 대각선 값을 추출하는 함수
sum(diag(t1)) / sum(t1) # 전체 중에 잘 맞힌것만 찾아낸 비율
test$pred <- pred_label
View(test)
pred_label = ifelse(pred3 >= 0.5, 1, 2)
t1 = table(test$Class, pred_label)
test$pred <- pred_label
diag(t1) # table의 대각선 값을 추출하는 함수
sum(diag(t1)) / sum(t1) # 전체 중에 잘 맞힌것만 찾아낸 비율
pred_label = ifelse(pred3 >= 0.5, 2, 1)
t1 = table(test$Class, pred_label)
test$pred <- pred_label
diag(t1) # table의 대각선 값을 추출하는 함수
sum(diag(t1)) / sum(t1) # 전체 중에 잘 맞힌것만 찾아낸 비율
install.packages("party")
c1 = ctree(Species~., train)
library(party)
c1 = ctree(Species~., train)
set.seed(1000)
ind = sample(1:nrow(iris),
nrow(iris)*0.7,
replace = F)
train = iris[ind, ]
test = iris[-ind, ]
c1 = ctree(Species~., train)
plot(c1)
ctl <- ctree_control(depth=2)
c1 = ctree(Species~., train, ctl)
ctl <- ctree_control(max_depth=2)
ctl <- ctree_control(maxdepth=2)
c1 = ctree(Species~., train, ctl)
c1 = ctree(Species~., train, controls = ctl)
plot(c1)
pred = predict(c1, newdata=test)
sum(pred2==test$Species)/nrow(test)
sum(pred==test$Species)/nrow(test)
data("Vowel")
ind2 = sample(1:nrow(Vowel),
nrow(Vowel)*0.7,
replace = F)
set.seed(100)
ind2 = sample(1:nrow(Vowel),
nrow(Vowel)*0.7,
replace = F)
train = Vowel[ind, ]
test = Vowel[-ind, ]
ind2 = sample(1:nrow(Vowel),
nrow(Vowel)*0.7,
replace = F)
train = Vowel[ind2, ]
test = Vowel[-ind2, ]
View(Vowel)
train = Vowel[ind2, -1]
test = Vowel[-ind2, -1]
c2 = ctree(Class~., train)
ind2 = sample(1:nrow(Vowel),
nrow(Vowel)*0.7,
replace = F)
train = Vowel[ind2, -1]
test = Vowel[-ind2, -1]
c2 = ctree(Class~., train)
pred2 = predict(c2, newdata=test)
table(test$Class, pred2)
sum(test$Class==pred2)/nrow(test1)
sum(test$Class==pred2)/nrow(test)
plot(c2)
install.packages("tree")
library(tree)
library(MASS)
library(tree)
ir.tr = tree(Species~., train)
ir.tr = tree(Species~., train)
set.seed(100)
ind3 = sample(1:nrow(iris),
nrow(iris)*0.7,
replace = F)
train = iris[ind2, -1]
test = iris[-ind2, -1]
ir.tr = tree(Species~., train)
ir.tr
plot(ir.tr)
text(ir.tr, all = T)
ir.tr1 = snip.tree(ir.tr)
data("Vowel")
set.seed(100)
ind2 = sample(1:nrow(Vowel),
nrow(Vowel)*0.7,
replace = F)
train = Vowel[ind2, -1]
test = Vowel[-ind2, -1]
c2 = ctree(Class~., train)
pred2 = predict(c2, newdata=test)
table(test$Class, pred2)
sum(test$Class==pred2)/nrow(test)
ir.tr = tree(Class~., train)
plot(ir.tr)
text(ir.tr, all = T)
ir.tr1 = snip.tree(ir.tr)
ir.tr1 = prune.misclass(ir.tr, best=4)
plot(prune.misclass(ir.tr1))
plot(prune.misclass(ir.tr1))
ir.tr1 = prune.misclass(ir.tr, best=4)
plot(ir.tr)
text(ir.tr, all = T)
plot(ir.tr1)
plot(ir.tr1)
text(ir.tr, all = T)
ir.tr = tree(Class~., train)
plot(ir.tr)
text(ir.tr, all = T)
ir.tr1 = prune.misclass(ir.tr, best=14)
plot(ir.tr1)
text(ir.tr1, all = T)
ir.tr = tree(Class~., train)
plot(ir.tr)
text(ir.tr, all = T)
ir.tr1 = prune.misclass(ir.tr, best=14)
plot(ir.tr1)
text(ir.tr1, all = T)
install.packages('randomForest')
library(randomForest)
r1 = randomForest(Class~., train)
r1$predicted
table(train$Class, r1$predicted)
t1 = table(train$Class, r1$predicted)
diag(t1) # table의 대각선 값을 추출하는 함수
sum(diag(t1)) / sum(t1) # 전체 중에 잘 맞힌것만 찾아낸 비율
View(Sonar)
View(train)
View(Sonar)
View(test)
View(Sonar)
pred = predict(r1, newdata = test)
t2 = table(test$Class, pred)
diag(t2)
sum(diag(t2)) / sum(t2)
url = "https://github.com/ozt-ca/tjo.hatenablog.samples/tree/master/r_samples/public_lib/jp/mnist_reproduced"
read.csv(paste(url, "prac_test.csv", sep = ""))
url = "https://github.com/ozt-ca/tjo.hatenablog.samples/tree/master/r_samples/public_lib/jp/mnist_reproduced"
read.csv(paste(url, "prac_test.csv", sep = "/"))
prac_test = read.csv(paste(url, "prac_test.csv", sep = "/"))
short_prac_train = read.csv(paste(url, "short_prac_train.csv", sep = "/"))
short_prac_test = read.csv(paste(url, "short_prac_test.csv", sep = "/"))
prac_test = read.csv(paste(url, "prac_test.csv", sep = "/"))
prac_train = read.csv(paste(url, "prac_train.csv", sep = "/"))
short_prac_train = read.csv(paste(url, "short_prac_train.csv", sep = "/"))
short_prac_test = read.csv(paste(url, "short_prac_test.csv", sep = "/"))
url = "https://github.com/ozt-ca/tjo.hatenablog.samples/raw/master/r_samples/public_lib/jp/mnist_reproduced"
prac_test = read.csv(paste(url, "prac_test.csv", sep = "/"))
url = "https://github.com/ozt-ca/tjo.hatenablog.samples/raw/master/r_samples/public_lib/jp/mnist_reproduced"
short_prac_train = read.csv(paste(url, "short_prac_train.csv", sep = "/"))
short_prac_test = read.csv(paste(url, "short_prac_test.csv", sep = "/"))
str(train)
str(short_prac_train)
train1 = train
train1 = short_prac_train
train1$label = factor(short_prac_train$label)
test1 = short_prac_test
test1$label = factor(short_prac_test$label)
r2 = randomForest(label~., train1)
pred = predict(r2, newdata = test1)
pred2 = predict(r2, newdata = test1)
t2 = table(test1$label, pred2)
diag(t2)
sum(diag(t2)) / sum(t2)
View(train1)
train2 = train1
train2[, -1] = train2[, -1]/255
test2 = test1
test2[, -1] = test2[, -1]/255
r3 = randomForest(label~. train2)
r3 = randomForest(label~., train2)
train2 = train1
train2[, -1] = as.integer(train2[, -1]/255)
test2 = test1
test2[, -1] = as.integer(test2[, -1]/255)
train2[, -1]/255
train2 = train1
train2[, -1] = round(train2[, -1]/255)
test2 = test1
test2[, -1] = round(test2[, -1]/255)
View(test2)
r3 = randomForest(label~., train2)
train2 = train1
train2[, -1] = round(train2[, -1]/255)
test2 = test1
test2[, -1] = round(test2[, -1]/255)
r3 = randomForest(label~., train2)
pred3 = predict(r3, newdata = test2)
t3 = table(test1$label, pred3)
diag(t3)
sum(diag(t3)) / sum(t3)
sum(diag(t2)) / sum(t2)
data("DNA")
View(DNA)
summary(DNA)
train_dna = DNA
ind = sample(1:nrow(DNA)*0.7, nrow(DNA)*0.7, replace = F)
train_dna = DNA[ind,]
test_dna = DNA[-ind,]
View(DNA)
r4 = randomForest(Class~., train_dna)
start1=Sys.time()
start2=Sys.time()
r4 = randomForest(Class~., train_dna)
interval = Sys.time() - start2
interval
pred4 = predict(r4, newdata = test_dna)
t4 = table(test_dna$Class, pred4)
diag(t4)
sum(diag(t4)) / sum(t4)
im1 = as.matrix(train1[1, -1])
str(im1)
m1 = matrix(im1, , nrow = 28, byrow = T)
str(m1)
image(m1)
install.packages("rvest")
install.packages("httr")
library(rvest)
library(httr)
text1 = GET("http://terms.naver.com/entry.nhn?docId=1691554&cid=42171&categoryId=42183")
txt = GET("http://terms.naver.com/entry.nhn?docId=1691554&cid=42171&categoryId=42183")
txt2 = html(txt)
txt2 = read_html(txt)
ir.tr = tree(Class~., train) # 가지치기 전
library(tree)
library(MASS)
data("Vowel")
set.seed(100)
ind2 = sample(1:nrow(Vowel),
nrow(Vowel)*0.7,
replace = F)
test = Vowel[-ind2, -1]
train = Vowel[ind2, -1]
pred2 = predict(c2, newdata=test)
c2 = ctree(Class~., train)
table(test$Class, pred2)
sum(test$Class==pred2)/nrow(test)
data("Vowel")
set.seed(100)
ind2 = sample(1:nrow(Vowel),
nrow(Vowel)*0.7,
replace = F)
train = Vowel[ind2, -1]
test = Vowel[-ind2, -1]
c2 = ctree(Class~., train)
library(tree)
library(MASS)
ir.tr = tree(Class~., train) # 가지치기 전
plot(ir.tr)
ir.tr1 = prune.misclass(ir.tr, best=14) # 가지치기 후
plot(ir.tr1)
plot(prune.misclass(ir.tr))
ir.tr = tree(Class~., train) # 가지치기 전
data("Vowel")
library(party)
data("Vowel")
library(tree)
library(MASS)
data("Vowel")
